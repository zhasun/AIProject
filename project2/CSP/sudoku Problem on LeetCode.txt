class Solution {
public:
    void solveSudoku(vector<vector<char> > &board) {
        DFS(board);
    }
    bool DFS(vector<vector<char> > &board) {
        for(int i = 0; i < 9; i++)
            for(int j = 0; j < 9; j++) {
                if(board[i][j] == '.') {
                    for(char k = '1'; k <= '9'; k++) {
                        board[i][j] = k;
                        if(isValid(board, i, j) && DFS(board))
                            return true;
                        board[i][j] = '.';
                    }
                    return false;
                }
            }
        return true;
    }
    bool isValid(vector<vector<char> > &board, int row, int col) {
        for(int i = 0; i < 9; i++)
            if(i != row && board[i][col] == board[row][col])
                return false;
        for(int i = 0; i < 9; i++)
            if(i != col && board[row][i] == board[row][col])
                return false;
        for(int i = row/3*3; i < row/3*3+3; i++)
            for(int j = col/3*3; j < col/3*3+3; j++)
                if(i != row && j != col && board[i][j] == board[row][col])
                    return false;
        return true;
    }
};